<!DOCTYPE html><html><head>
<title>山人拆分检索</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<base target="_blank" />

<!----------------------------------------------------------------------------->
<!--------    <style type="text/css">@font-face {
    font-family: 'ziti1';
    src: url('TH-Tshyn-P0.ttf') format('truetype');
}</style>    ------------->
<!-------- https://cdn\.jsdelivr\.net/gh/arpcn/abhidharma@main/html/sunman/ --------->
<script src="../../../analytics.js"></script>
<style>
@font-face {
    font-family: 'ziti1';
    src: url('SunmanPUA.ttf') format('truetype');
/*    font-display: swap; */
}
@font-face {
    font-family: 'ziti2';
    src: url('TH-Tshyn-P0.ttf') format('truetype');
}
@font-face {
    font-family: 'ziti3';
    src: url('TH-Tshyn-P1.ttf') format('truetype');
}
@font-face {
    font-family: 'ziti4';
    src: url('TH-Tshyn-P2.ttf') format('truetype');
}
 /*  https://cdn\.jsdelivr\.net/gh/arpcn/abhidharma@main/html/sunman/  */

body{font-family: SunmanPUA,TH-Tshyn-P0,TH-Tshyn-P1,TH-Tshyn-P2,ziti1, ziti2, ziti3, ziti4,Calibri,FMing-m,FMing-1,FMing-2,FMing-3,FMing-F,FMing-X,FSung-m,FSung-1,FSung-2,FSung-3,FSung-F,FSung-X,MingLiU,MingLiU-ExtB;}

/* body {font-family: Tahoma, Arial, Helvetica, sans-serif, SunmanPUA, TH-Tshyn-P0, TH-Tshyn-P1, TH-Tshyn-P2; }
        字体加载后的样式 */
html.fonts-loaded { font-family: Tahoma, Arial, Helvetica, sans-serif, SunmanPUA,TH-Tshyn-P0,TH-Tshyn-P1,TH-Tshyn-P2,ziti1, ziti2, ziti3, ziti4; }
a{background-color: #ffffff}
a{text-decoration:none}
a:link{color:#1257F9}
a:visited{color:#1257F9}
a:hover{color:#FF00FF}
button:hover{color:#FF00FF}
.Line {display:block;}
.Title {font-size:1.5em;color:#0000FF;font-weight:bolder;}
.Editor {font-size:1.2em;font-family: SunmanPUA,TH-Tshyn-P0,TH-Tshyn-P1,TH-Tshyn-P2,ziti1, ziti2, ziti3, ziti4,Calibri,FMing-m,FMing-1,FMing-2,FMing-3,FMing-F,FMing-X,FSung-m,FSung-1,FSung-2,FSung-3,FSung-F,FSung-X,MingLiU,MingLiU-ExtB;}
.Options {margin-left:4em;text-indent:-3em;}
.LabelB {color:#000088;}
.Button {width:2em;height:2em;border:1px solid #707070;padding:3px 2px 1px 2px;border-radius:5px;background-color:#E0E0E0;margin-left:0;text-indent:0;cursor:pointer;font-family:Arial;}
.Output {font-size:1.5em;color:#9c5f21;line-height:150%;font-family: SunmanPUA,TH-Tshyn-P0,TH-Tshyn-P1,TH-Tshyn-P2,ziti1, ziti2, ziti3, ziti4;}

/*设备显示 */
@media screen and (min-width:880px){.rich_media{position:relative;}.rich_media {width:880px;margin-left:auto;margin-right:auto;}}
@media only screen and (max-width: 879px) { 
    .zoom {
        /* 以左边顶点为变换原点 */
        transform-origin: left top;
        /* 放大1.5倍 */
        transform: scale(1.2);
        /* 限制最大宽度为手机屏幕宽度 */
        max-width: 100vw;
        word-wrap: break-word;
        white-space: normal;    }
}

     .image-cnt {
            display: flex;
            flex-wrap: nowrap;
            justify-content: flex-start;
        }

     .img {
            width: 56px;
            height: 56px;
        }

        /* 媒体查询，当窗口宽度小于某个值时，调整图片宽度 */
        @media (max-width: 550px) {
         .img {
                width: calc((100% - 36px) / 8);
                /* 假设图片之间有10px的间隙，5个间隙共5 * 10px */
                height: calc((100% - 36px) / 8);
            }
        }
input::-ms-input-placeholder {color: #f8e0cd;font-size:14px;} 
input::placeholder {color: #f8e0cd;font-size:14px;} 
input::-webkit-input-placeholder {color: #f8e0cd;font-size:14px;} 
input::-moz-placeholder {color: #f8e0cd;font-size:14px;} 
        #loading {
            display: none; /* 默认隐藏 */
            color: #f26f0d;font-size:0.8em;
        }
        #loadingf {
            display: none; /* 默认隐藏 */
            color: #f26f0d;font-size:0.8em;
        }
        .fonts-loaded #loadingf {
            display: none; /* 字体加载完成后隐藏提示 */
        }

</style>
</head>

<body bgcolor="#ffffff">

<div  class='rich_media'>
<div  class='zoom'>

<hr size=3 color=#c9c9c9>
<details open>
<summary><span class="Title">1．山人單字查詢</span><span style="color:gray;font-size:0.65em;text-align:right;display:inline-block;width:calc(120px);"><b><i>點擊縮展</i></b> ☜</span></summary>
<hr color=#e7e7e7>
<span class="Line Options"><span class="LabelB">編碼</span>：<input class="Editor" type="text" id="inputCode" oninput="findCharacter()" style="width: 150px;" placeholder="請輸入編碼"></input><button class="Button" onclick="clearInputCode()">X</button> <span style="color:gray;font-size:0.65em; text-align:right;display:inline-block;width:calc(230px);">輸入法：1.<a href="https://github.com/arpcn/rime-shanren3/wiki/RimeSetup">Rime小狼毫</a> 2.<a href="https://github.com/arpcn/rime-shanren3/blob/master/rimesetup/山人輸入法強化訓練.rar">山人輸入法學習</a></span></span>
<span class="Line Options"><span class="LabelB">漢字</span>：
<span id="loadingf" class="Options" style="display:inline-block;">字體加載中...</span>
<span id="loading" class="Options" style="display:inline-block;">數據加載中，請稍候...</span>
<span class="Output" id="result"></span></span>
</details>




<hr size=2 color=#c9c9c9>
<details open>   
<summary><span class="Title">2．山人拆分檢索</span><span style="color:gray;font-size:0.65em;text-align:right;display:inline-block;width:calc(120px);"><b><i>點擊縮展</i></b> ☜</span></summary>
<hr color=#e7e7e7>
<span class="Line Options"><span class="LabelB">漢字</span>：<input class="Editor" id="input" oninput="searchCharacter()" style="width: 150px;" placeholder="請輸入漢字"></input><button class="Button" onclick="clearInput()">X</button></span>
<hr color=#f0f0f0>
<span class="Output" id="output"><br><br><br><br><br></span>
</details>




<hr size=2 color=#c9c9c9>
<details open>
<summary><span class="Title">3．山人全息碼查字</span><span style="color:gray;font-size:0.65em;text-align:right;display:inline-block;width:calc(120px);"><b><i>點擊縮展</i></b> ☜</span></summary>
<hr color=#e7e7e7>
<span class="Line Options"><span class="LabelB">全息碼</span>：<input class="Editor" type="text" id="inputCodeB" oninput="findCharacterB()" style="width: 150px;" placeholder="請輸入編碼"></input><button class="Button" onclick="clearInputCodeB()">X</button> <span style="color:gray;font-size:0.65em; text-align:right;display:inline-block;width:calc(150px);">查字根先輸入zv</span></span>
<!--   <span class="Line Options"><span class="LabelB" style="position:relative; top:-123px;">漢字：</span><iframe id="resultBFrame" src="resultB.html" style="display: inline-block; border: none; width: 100%; height: 150px;position:relative; top:-7px;"></iframe></span> -->
<span class="Line Options"><span class="LabelB">漢字</span>：
<span class="Output" id="resultB"></span></span>

</details>

</div>
</div>


<!-- 字體 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/fontfaceobserver/2.1.0/fontfaceobserver.standalone.js"></script>

<script>
// ----- 字體 ----- 
    // 定义一个异步加载的函数
    function loadFonts() {
        const font1 = new FontFaceObserver('ziti1');
        const font2 = new FontFaceObserver('ziti2');
        const font3 = new FontFaceObserver('ziti3');
        const font4 = new FontFaceObserver('ziti4');

        // 显示加载提示
        const loadingfDiv = document.getElementById('loadingf');
        loadingfDiv.style.display = 'block';

        // 使用 Promise.all 并行加载所有字体
        Promise.all([
            font1.load(),
            font2.load(),
            font3.load(),
            font4.load()
        ]).then(function () {
          //   console.log('所有字体加载完成');
            // 为 HTML 添加一个 class，表示字体已加载
            document.documentElement.classList.add('fonts-loaded');
        }).catch(function (err) {
         //    console.error('字体加载失败:', err);
        }).finally(function () {
            // 隐藏加载提示
            loadingfDiv.style.display = 'none';
        });
    }

    // 调用字体加载函数
    loadFonts();


//  ----- 加载数据库  ----- 
    function loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = () => resolve();
            script.onerror = () => reject(new Error(`加载脚本失败: ${src}`));
            document.head.appendChild(script);
        });
    }

    async function loadScripts() {
        const scriptFiles = [
            'db.js'
        ];

        // 显示加载提示
        document.getElementById('loading').style.display = 'block';

        // 等待所有脚本加载完成
        try {
            await Promise.all(scriptFiles.map(file => loadScript(file)));
        } catch (error) {
            console.error(error);
        } finally {
            // 隐藏加载提示并显示内容
            document.getElementById('loading').style.display = 'none';
        //      document.getElementById('content').style.display = 'block';
        }
    }

    // 初始化加载过程
    loadScripts();


//  ----- 输入框 ----- 
    function clearInputCode() {
        document.getElementById('inputCode').value = ''; // 清空输入框
        findCharacter(''); // 重新更新输出
    }

    function clearInput() {
        document.getElementById('input').value = ''; // 清空输入框
        searchCharacter(''); // 重新更新输出
    }

    function clearInputCodeB() {
        document.getElementById('inputCodeB').value = ''; // 清空输入框
        findCharacterB(''); // 重新更新输出
    }


//  ----- UI 程式区1  ----- 
        function findCharacter() {
            const inputCode = document.getElementById("inputCode").value.trim().toLowerCase();
            var resultDiv = document.getElementById('result');
            result = ''; // 清空结果区域

            if (inputCode.length === 0) {
                resultDiv.innerHTML = '<span style="color:gray;font-size:0.65em;font-weight:lighter;">無編碼</span>';
                return;
            }

            dt.forEach(function(entry) {
                // 判断输入字符长度以决定匹配方式
                var regex;
                if (inputCode.length <= 2) {
                    // 全字匹配
                    regex = new RegExp(`【${inputCode}】`, 'i');
                } else {
                    // 启动匹配以输入字符开始
                    regex = new RegExp(`【(${inputCode})[a-z]*】`, 'i'); // 'i' 标记用于不区分大小写
                }

                if (regex.test(entry)) {
                    // 找到匹配的内容，提取 ":" 前的字符
                    var charBeforeColon = entry.split(':')[0];
                    result += charBeforeColon + '、';
                }
            });

            // 显示结果
            if (result) {
                resultDiv.innerHTML = '' + result;
            } else {
                resultDiv.innerHTML = '<span style="color:gray;font-size:0.65em;font-weight:lighter;">無對應的漢字</span>';
            }
          }


//  ----- UI 程式区3  ----- 
        function findCharacterB() {
            const inputCodeB = document.getElementById("inputCodeB").value.trim().toLowerCase();
            var resultDivB = document.getElementById('resultB');
            resultB = ''; // 清空结果区域

            if (inputCodeB.length === 0) {
                resultDivB.innerHTML = '<span style="color:gray;font-size:0.65em;font-weight:lighter;">無編碼</span>';
                return;
            }

            dt.forEach(function(entry) {
                // 判断输入字符长度以决定匹配方式
                var regex;
                if (inputCodeB.length <= 2) {
                    // 全字匹配
                    regex = new RegExp(`_${inputCodeB}$`, 'i');
                } else {
                    // 启动匹配以输入字符开始
                    regex = new RegExp(`_${inputCodeB}[a-z]*(_|$)`, 'i'); // 'i' 标记用于不区分大小写
                }

                if (regex.test(entry)) {
                    // 找到匹配的内容，提取 ":" 前的字符
                    var charBeforeColon = entry.split(':')[0];
                    resultB += charBeforeColon + '、';
                }
            });

            // 显示结果
            if (resultB) {
                resultDivB.innerHTML = '' + resultB;
            } else {
                resultDivB.innerHTML = '<span style="color:gray;font-size:0.65em;font-weight:lighter;">無對應的漢字</span>';
            }
        }

//  ----- UI 程式区2  ----- 

    function searchCharacter() {
        const input = document.getElementById("input").value.trim().toLowerCase();
        var output = document.getElementById('output'); // 获取输出区域
        output.innerHTML = '<br><br><br><br><br>'; // 清空输出区域
        if (input) {
            var results = dt.filter(entry => entry.startsWith(input)); // 根据输入内容过滤结果
            if (results.length > 0) {
                // 去掉第一个半角冒号前的部分
                var filteredResults = results.map(entry => {

        // 提取汉字和编码信息
        var match = entry.match(/^(.+?):([^ ]+?),([^ ]+】■?)(cf. .+|)_[a-z]+(_[a-z]+|)$/);

        if (match) {
            var character = match[1].trim();
            var contentA = match[2].trim();
            var contentB = match[3].trim();
            var content_cf = match[4].trim();
    // 定义图片和链接的基本 URL
    var imagesBaseUrl = "https://ziphoenicia-1300189285.cos.ap-shanghai.myqcloud.com/code_chart_14/";
    var glyphBaseUrl = "https://glyphwiki.org/glyph/";
        var sortz  = ""

        var unicodeValue = character.codePointAt(0);
        var code = unicodeValue.toString(16);
        var codeu = unicodeValue.toString(16).toUpperCase();
        if (unicodeValue >= 0x2E80 && unicodeValue <= 0x2EF3) { var sortz = "部首补充"}
        if (unicodeValue >= 0x2F00 && unicodeValue <= 0x2FD5) { var sortz = "康熙部首"}
        if (unicodeValue >= 0x2FF0 && unicodeValue <= 0x2FFB) { var sortz = "文字序列"}
        if (unicodeValue >= 0x3003 && unicodeValue <= 0x3037) { var sortz = "符号和标点"}
        if (unicodeValue >= 0x3044 && unicodeValue <= 0x309B) { var sortz = "平假名"}
        if (unicodeValue >= 0x30AD && unicodeValue <= 0x30FF) { var sortz = "片假名"}
        if (unicodeValue >= 0x3105 && unicodeValue <= 0x312F) { var sortz = "注音符号"}
        if (unicodeValue >= 0x3148 && unicodeValue <= 0x3152) { var sortz = "谚文兼容"}
        if (unicodeValue >= 0x31C0 && unicodeValue <= 0x31E3) { var sortz = "笔画"}
        if (unicodeValue >= 0x3400 && unicodeValue <= 0x4DBF) { var sortz = "ExtA"}
        if (unicodeValue >= 0x4E00 && unicodeValue <= 0x9FFF) { var sortz = "CJK"}
        if (unicodeValue >= 0xE400 && unicodeValue <= 0xE5EF) { var sortz = "私用区S"}
        if (unicodeValue >= 0xE612 && unicodeValue <= 0xE6F8) { var sortz = "私用区"}
        if (unicodeValue >= 0xE740 && unicodeValue <= 0xE77A) { var sortz = "私用区S"}
        if (unicodeValue >= 0xE815 && unicodeValue <= 0xE864) { var sortz = "私用区80"}
        if (unicodeValue >= 0xF900 && unicodeValue <= 0xFAD9) { var sortz = "兼容文字"}
        if (unicodeValue >= 0x20000 && unicodeValue <= 0x2A6DF) { var sortz = "ExtB"}
        if (unicodeValue >= 0x2A700 && unicodeValue <= 0x2B739) { var sortz = "ExtC"}
        if (unicodeValue >= 0x2B740 && unicodeValue <= 0x2B81D) { var sortz = "ExtD"}
        if (unicodeValue >= 0x2B820 && unicodeValue <= 0x2CEA1) { var sortz = "ExtE"}
        if (unicodeValue >= 0x2CEB0 && unicodeValue <= 0x2EBE0) { var sortz = "ExtF"}
        if (unicodeValue >= 0x2EBF0 && unicodeValue <= 0x2EE5D) { var sortz = "ExtI"}
        if (unicodeValue >= 0x2F800 && unicodeValue <= 0x2FA1D) { var sortz = "兼容增补"}
        if (unicodeValue >= 0x30000 && unicodeValue <= 0x3134A) { var sortz = "ExtG"}
        if (unicodeValue >= 0x31350 && unicodeValue <= 0x323AF) { var sortz = "ExtH"}

            // 生成图片内容
            var imageContent1 = `
                <div class="image-cnt">
                    G<img class="img" src="${imagesBaseUrl}${character}_G.svg">
                    H<img class="img" src="${imagesBaseUrl}${character}_H.svg">
                    T<img class="img" src="${imagesBaseUrl}${character}_T.svg">
                    J<img class="img" src="${imagesBaseUrl}${character}_J.svg">
                    K<img class="img" src="${imagesBaseUrl}${character}_K.svg">
                    V<img class="img" src="${imagesBaseUrl}${character}_V.svg">
                    0<img class="img" src="${glyphBaseUrl}u${code}.svg">
                </div>
                <div class="image-cnt">
                    G<img class="img" src="${glyphBaseUrl}u${code}-g.svg">
                    H<img class="img" src="${glyphBaseUrl}u${code}-h.svg">
                    T<img class="img" src="${glyphBaseUrl}u${code}-t.svg">
                    J<img class="img" src="${glyphBaseUrl}u${code}-j.svg">
                    K<img class="img" src="${glyphBaseUrl}u${code}-k.svg">
                    V<img class="img" src="${glyphBaseUrl}u${code}-v.svg">
                    KP<img class="img" src="${glyphBaseUrl}u${code}-kp.svg">
                </div>
                <a href="https://glyphwiki.org/wiki/u${code}" class="Out">字形</a>　<a href="http://www.zisea.com/zscontent.asp?uni=${codeu}" class="Out">字海</a>　<a href="http://ccamc.org/cjkv.php?cjkv=${character}" class="Out">集成</a>　<a href="https://www.zdic.net/hans/${character}" class="Out">汉典</a>　<a href="https://zi.tools/zi/${character}" class="Out">字統</a><br>`;

            // 返回完整的条目
            return character + "：" + contentA + "(" + sortz + "_" + codeu + ")<br>編碼：" + contentB + imageContent1 + content_cf ;
        }else {
             //        let index = entry.indexOf(':'); //找到第一个冒号的位置
             //        return index !== -1 ? entry.substring(index + 1) : ''; // 返回冒号后的部分
                }
                }).join('<br>'); // 将结果连接为字符串
                output.innerHTML = filteredResults; // 将结果显示在输出区域
            } else {
                output.innerHTML = '<span style="color:gray;font-size:0.75em;font-weight:lighter;">未找到相關結果，請輸入單個漢字</span><br><br><br><br><br>'; // 找不到结果时的提示
            }
        }
    }

</script>

</body></html>
